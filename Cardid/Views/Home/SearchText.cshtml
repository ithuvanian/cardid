
@using Cardid.Models
@model Search
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Model.SearchString == null)
{
    <div>
        <h1 class="view-title">
            <span class="icons">
                &#xe90f;
            </span>
            <span class="half-tab"></span>
            Search cards, decks & tags
        </h1>
    </div>
}
else
{
    <div>
        <h2 class="view-title">
            Search results for:
            <span class="large-type">@Model.SearchString</span>
        </h2>
    </div>
}

<div class="module">

    @using (Html.BeginForm("SearchText", "Home", null, FormMethod.Get, new { @class = "vertical-form" }))
    {
        <div>
            <input type="text" name="searchString" class="single-input" placeholder="text to search for" />
        </div>
        <div>
            <button type="submit" class="btn main-btn">
                <span class="icons">
                    &#xe90f;
                </span>
                <span class="tab"></span>
                New search
            </button>
        </div>
    }
</div>


@if (Model.SearchString != null)
{
    <div>
        <div class="results-container">

            <h2 class="view-title">
                Cards:
            </h2>

            @if (Model.MatchingCards.Count == 0)
            {
                <p class="at-bottom at-top">
                    No cards found containing that text.
                </p>
            }
            else
            {
                <div>
                    <p class="at-top at-bottom">
                        @Model.MatchingCards.Count matches found
                    </p>

                    <button class="btn main-btn show-btn">
                        <span class="icons">
                            &#xe931;
                        </span>
                        Show
                    </button>
                </div>

                <div class="results-section hidden">

                    <button class="btn main-btn hide-btn">
                        <span class="icons">
                            &#xe934;
                        </span>
                        Hide
                    </button>
                    <div class="spacer"></div>

                    @if (Model.UserCards == true)
                    {
                        <div class="results-subsection flex flex-left">


                            <h2 class="view-title results-title">Your Cards</h2>

                            @foreach (Card thisCard in Model.MatchingCards)
                            {
                                if (thisCard.UserID == Model.UserID)
                                {
                                    <div class="card-bothsides">
                                        <div class="card-field">@thisCard.Front</div>
                                        <div class="card-field">@thisCard.Back</div>

                                        <div class="card-options">

                                            <div>
                                                <a href="@Url.Action("EditCardInit", "Card", new { cardID = thisCard.CardID, searchString = Model.SearchString })" class="btn main-btn">
                                                    <span class="icons">&#xe90d;</span>
                                                    <span class="tab"></span>
                                                    Edit card
                                                </a>
                                            </div>

                                            @if (thisCard.AvailableDecks().Count > 0)
                                            {
                                                <a href="@Url.Action("ChooseDeckInit", "Card", new { cardID = thisCard.CardID })" class="btn main-btn">
                                                    <span class="icons">
                                                        &#xe90e;
                                                    </span>
                                                    <span class="tab"></span>
                                                    Add to a different deck
                                                </a>
                                            }

                                        </div>

                                        <div class="card-decks">
                                            <p class="small-type at-bottom">Currently in:</p>
                                            @for (int i = 0; i < thisCard.Decks().Count; i++)
                                            {
                                                Deck deck = thisCard.Decks()[i];
                                                if (deck.UserID == Session["userid"].ToString())
                                                {
                                                    @Html.ActionLink(deck.DeckName, "EditDeck", "Deck", new { deckId = deck.DeckID }, new { @class = "deck-incard small-type" })

                                                }
                                                else
                                                {
                                                    @Html.ActionLink(deck.DeckName, "ViewDeck", "Deck", new { deckId = deck.DeckID }, new { @class = "deck-incard small-type" })
                                                }
                                            }
                                        </div>

                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (Model.PublicCards == true)
                    {
                        <div class="results-subsection flex flex-left">
                            <h2 class="view-title results-title">Public Cards</h2>

                            @foreach (Card thisCard in Model.MatchingCards)
                            {
                                if (thisCard.UserID != Model.UserID)
                                {
                                    <div class="card-bothsides">
                                        <div class="card-field">@thisCard.Front</div>
                                        <div class="card-field">@thisCard.Back</div>

                                        <div class="card-options">

                                            <a href="@Url.Action("ChooseDeckInit", "Card", new { cardID = thisCard.CardID })" class="btn main-btn">
                                                <span class="icons">
                                                    &#xe90e;
                                                </span>
                                                <span class="tab"></span>
                                                Add to a different deck
                                            </a>

                                        </div>

                                        <div class="card-decks">
                                            <p class="small-type at-bottom">Currently in:</p>
                                            @for (int i = 0; i < thisCard.Decks().Count; i++)
                                            {
                                                Deck deck = thisCard.Decks()[i];
                                                if (deck.UserID == Session["userid"].ToString())
                                                {
                                                    @Html.ActionLink(deck.DeckName, "EditDeck", "Deck", new { deckId = deck.DeckID }, new { @class = "deck-incard small-type" })

                                                }
                                                else
                                                {
                                                    @Html.ActionLink(deck.DeckName, "ViewDeck", "Deck", new { deckId = deck.DeckID }, new { @class = "deck-incard small-type" })
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                    }

                </div>
            }
        </div>



        <div class="results-container">

            <h2 class="view-title">
                Decks:
            </h2>

            @if (Model.MatchingDecks.Count > 0)
            {
                <div>
                    <p class="at-top at-bottom">
                        @Model.MatchingDecks.Count matches found
                    </p>

                    <button class="btn main-btn show-btn">
                        <span class="icons">
                            &#xe931;
                        </span>
                        Show
                    </button>
                </div>


                <div class="results-section hidden">

                    <button class="btn main-btn hide-btn">
                        <span class="icons">
                            &#xe934;
                        </span>
                        Hide
                    </button>

                    @foreach (Deck thisDeck in Model.MatchingDecks)
                    {
                        if (Model.UserID == thisDeck.UserID)
                        {
                            <a href="@Url.Action("EditDeck", "Deck", new { deckID = thisDeck.DeckID })" class="deck-listing">
                                <span class="icons large-type">
                                    &#xe90e;
                                </span>
                                <span class="tab"></span>
                                <p class="deckname-listing">@thisDeck.DeckName</p>
                            </a>
                        }

                        else
                        {
                            <a href="@Url.Action("ViewDeck", "Deck", new { deckID = thisDeck.DeckID })" class="deck-listing">
                                <span class="icons large-type">
                                    &#xe90e;
                                </span>
                                <span class="tab"></span>
                                <p class="deckname-listing">@thisDeck.DeckName</p>
                            </a>
                        }
                    }

                </div>

            }
            else
            {
                <p class="at-bottom at-top">
                    No decks found containing that text.
                </p>
            }
        </div>



        <div class="results-container">

            <h2 class="view-title">
                Tags:
            </h2>

            @if (Model.MatchingTags.Count > 0)
            {
                <div>
                    <p class="at-top at-bottom">
                        @Model.MatchingTags.Count matches found
                    </p>

                    <button class="btn main-btn show-btn">
                        <span class="icons">
                            &#xe931;
                        </span>
                        Show
                    </button>
                </div>


                <div class="results-section hidden">

                    <button class="btn main-btn hide-btn">
                        <span class="icons">
                            &#xe934;
                        </span>
                        Hide
                    </button>
                    <div class="spacer"></div>

                    <div class="tag-results">
                        @foreach (Tag thisTag in Model.MatchingTags)
                        {
                            @Html.ActionLink(thisTag.TagName, "SearchDeckTags", "Deck", new { searchString = thisTag.TagName }, new { @class = "tag search-tag" });
                        }
                    </div>

                </div>

            }
            else
            {
                <p class="at-bottom at-top">
                    No tags found containing that text
                </p>
            }
        </div>

    </div>
}

<script type="text/javascript" src="../../Content/searchText.js"></script>
