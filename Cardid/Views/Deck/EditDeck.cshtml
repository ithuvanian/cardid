@using Cardid.Models
@model Deck
@{
    ViewBag.Title = "EditDeck";
    List<Tag> otherTagsByName = ViewBag.OtherTagsByName;
    List<Tag> otherTagsByPopularity = ViewBag.OtherTagsByPopularity;
}



<h1 class="view-title">Edit Deck: @Model.Name</h1>

<div class="flex flex-left">

    <div class="editdeck-left">


        <div>
            <div class="option">
                @Html.ActionLink("Back to decks", "Index", "Deck", null, new { @class = "btn main-btn" })
            </div>

            <div class="option">
                @Html.ActionLink("Study this deck", "StudyBegin", "Deck", new { deckID = Model.DeckID }, new { @class = "btn main-btn" })
            </div>

            <div class="option">
                @if (Model.IsPublic == false)
                {
                    <p>This deck is visible only to you.</p>
                    @Html.ActionLink("Make public", "MakeDeckPublic", "Deck", new { deckID = Model.DeckID }, new { @class = "btn main-btn" })
                }
                else
                {
                    <p>This deck is visible to everyone.</p>
                    @Html.ActionLink("Make private", "MakeDeckPrivate", "Deck", new { deckID = Model.DeckID }, new { @class = "btn main-btn" })
                }
            </div>

            <div class="option">
                <button class="btn delete-btn delete-init">Delete This Deck</button>

                @using (Html.BeginForm("DeleteDeck", "Deck", new { deckID = Model.DeckID }, FormMethod.Post, new { @class = "delete-submit" }))
                {
                    <p>Deleting a deck will also delete all cards that exist only in that deck. Continue?</p>
                    <button type="submit" class="btn delete-btn">Confirm Delete</button>
                    <button type="reset" class="btn main-btn cancel-btn">Cancel</button>
                }
            </div>
        </div>
    </div>

    <div class="editdeck-right">
        <div class="tag-container">
            <h4 class="bold">Tags</h4>

            @foreach (Tag tag in Model.Tags)
            {
                @Html.ActionLink(tag.TagName, "RemoveDeckTag", "Deck", new { deckID = Model.DeckID, tagID = tag.TagID }, new { @class = "tag active-tag" });
            }
        </div>

        <div class="option">
            <h4 class="bold">Add Other Tags</h4>
            <div class="tagviews">
                <span class="tagview-pop bold">sort by popularity</span>
                <span class="tagview-alph pointer">sort alphabetically</span>
            </div>

            <div class="tag-container">
                <div class="tags-pop">

                    @foreach (Tag tag in otherTagsByPopularity)
                    {
                        @Html.ActionLink(tag.TagName, "AddDeckTag", "Deck", new { deckID = Model.DeckID, tagID = tag.TagID }, new { @class = "tag inactive-tag" });
                    }
                </div>

                <div class="tags-alph hidden">

                    @foreach (Tag tag in otherTagsByName)
                    {
                        @Html.ActionLink(tag.TagName, "SearchDeckTags", "Deck", new { searchString = tag.TagName }, new { @class = "tag active-tag" });
                    }
                </div>
            </div>
        </div>


        <div class="option">
            <h4 class="bold">Create a new tag for this deck:</h4>

            @using (Html.BeginForm("CreateTag", "Deck", FormMethod.Post))
            {
                @Html.TextBoxFor(m => m.NewTag.TagName)

                @Html.HiddenFor(m => Model.DeckID)

                <button type="submit" class="btn main-btn">
                    Add new tag
                </button>
            }
        </div>

    </div>
</div>



@if (Model.Cards.Count != 0)
{
    <div class="container-header">

        <h1 class="view-title">Cards in this deck:</h1>
        @Html.ActionLink("Find more cards to add", "ChooseCardsInit", "Card", new { deckID = Model.DeckID }, new { @class = "btn main-btn" })

    </div>

    <div class="flex flex-center">
        <div class="card-container">

            @foreach (var card in Model.Cards)
            {
                <div class="card-bothsides">

                    <div class="front-field">@card.Front</div>

                    <div class="back-field">@card.Back</div>

                    <div class="card_options">
                        @Html.ActionLink("Edit this card", "EditCardInitD", "Card", new { cardID = card.CardID, deckID = Model.DeckID }, new { @class = "btn main-btn" })
                    </div>

                    @using (Html.BeginForm("RemoveCardFromDeck", "Deck", new { cardID = card.CardID, deckID = Model.DeckID }))
                    {
                        <button class="remove-card">
                            &#x2297;
                        </button>
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <p>
        Currently no cards in this deck.
        @Html.ActionLink("Add some here", "ChooseCardsInit", "Card", new { deckID = Model.DeckID }, new { @class = "btn main-btn" })
    </p>
}




<script type="text/javascript" src="../../Content/editDeck.js"></script>
<script type="text/javascript" src="../../Content/deckTags.js"></script>

