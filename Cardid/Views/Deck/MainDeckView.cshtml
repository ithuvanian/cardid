@using Cardid.Models
@model List<Deck>
@{
    ViewBag.Title = "MainDeckView";
    List<Tag> tagsByName = ViewBag.TagsByName;
    List<Tag> tagsByPopularity = ViewBag.TagsByPopularity;
    string userID = ViewBag.UserID;
    bool userDecks = false;
    bool publicDecks = false;

    foreach (Deck deck in Model)
    {
        if (deck.UserID == userID)
        {
            userDecks = true;
        }
        if (deck.UserID != userID && deck.Cards().Count > 0)
        {
            publicDecks = true;
        }
    }
}



@if (ViewBag.SearchName != null)
{
    <h1 class="view-title">
        Search results for "@ViewBag.SearchName":
    </h1>
}

else if (ViewBag.SearchTag != null)
{
    <h2 class="view-title" : inline-block">
        Tag search results for:
        <span class="large-type">
            @ViewBag.SearchTag
        </span>
    </h2>
}

else
{
    <h1 class="view-title">All Decks</h1>
}


<div class="flex flex-baseline">
    <div class="deck-column">
        <div>
            @if (ViewBag.SearchName != null || ViewBag.SearchTag != null)
            {
                @Html.ActionLink("View all available decks", "Index", "Deck", null, new { @class="btn main-btn"})
            }

            @Html.ActionLink("Create a new deck", "CreateDeckInit", "Deck", null, new { @class = "btn main-btn" })

            @using (Html.BeginForm("SearchDeckNames", "Deck"))
            {
                <input type="text" name="searchString" />
                <button type="submit" class="btn main-btn">Search by deck name</button>
            }
        </div>

        <div class="option module">
            <p class="bold large-type tagsearch-heading">Search decks by tag</p>

            <div class="tagviews">
                <p class="tagview-pop bold">sort by popularity</p>
                <p class="tagview-alph pointer">sort alphabetically</p>
            </div>

            <div class="tag-container">

                <div class="tags-pop">

                    @foreach (Tag tag in tagsByPopularity)
                    {
                        @Html.ActionLink(tag.TagName, "SearchDeckTags", "Deck", new { searchString = tag.TagName }, new { @class = "tag active-tag" });
                    }
                </div>

                <div class="tags-alph hidden">

                    @foreach (Tag tag in tagsByName)
                    {
                        @Html.ActionLink(tag.TagName, "SearchDeckTags", "Deck", new { searchString = tag.TagName }, new { @class = "tag active-tag" });
                    }
                </div>

            </div>
            @using (Html.BeginForm("CreateTag", "Deck"))
            {
                <input type="text" name="tagName" />
                <button type="submit" class="btn main-btn">Create a new tag</button>
            }

        </div>
    </div>


    <div class="deck-column">

        @if (Model.Count == 0 || (userDecks == false && publicDecks == false))
        {
            if (ViewBag.SearchName != null)
            {
                <div class="module">
                    No decks found matching that name.
                </div>
            }
            else if (ViewBag.SearchTag != null)
            {
                <div class="module">
                    No decks found with that tag.
                </div>
            }
        }


        @if (userDecks)
        {
            <h2 class="view-title deck-heading">Your decks</h2>

            foreach (Deck deck in Model)
            {
                if (deck.UserID == userID)
                {
                    <div class="deck-listing">

                        @Html.ActionLink(@deck.DeckName, "EditDeck", "Deck", new { deckID = deck.DeckID }, new { @class = "deckname-listing" })

                        <div class="deck-info">
                            <span class="small-type">
                                @deck.Cards().Count cards
                            </span>
                        </div>
                        @if (deck.Cards().Count > 0)
                        {
                            @Html.ActionLink("Study back -> front", "StudyBegin", "Deck", new { deckID = deck.DeckID, frontFirst = false }, new { @class = "btn main-btn float-right" })
                            @Html.ActionLink("Study front -> back", "StudyBegin", "Deck", new { deckID = deck.DeckID, frontFirst = true }, new { @class = "btn main-btn float-right" })
                        }
                    </div>
                }
            }
        }


        @if (publicDecks)
        {
            <h2 class="view-title deck-heading">Public decks</h2>
            foreach (Deck deck in Model)
            {
                if (deck.UserID != userID)
                {
                    <div class="deck-listing">

                        @Html.ActionLink(@deck.DeckName, "CardsInDeck", "Deck", new { deckID = deck.DeckID }, new { @class = "deckname-listing" })

                        <div class="deck-info">
                            <p class="small-type narrow-line">
                                @deck.Cards().Count cards
                            </p>
                            <p class="narrow-line">
                                <span class="small-type">Shared by</span> @deck.Creator().DisplayName
                            </p>
                        </div>

                        <div>
                            @Html.ActionLink("Study Back->Front", "StudyBegin", "Deck", new { deckID = deck.DeckID, frontFirst = false }, new { @class = "btn main-btn float-right" })
                            @Html.ActionLink("Study Front->Back", "StudyBegin", "Deck", new { deckID = deck.DeckID, frontFirst = true }, new { @class = "btn main-btn float-right" })
                        </div>
                    </div>
                }
            }
        }

    </div>
</div>


<script type="text/javascript" src="../../Content/deckTags.js"></script>
