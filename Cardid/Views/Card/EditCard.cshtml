
@{
    ViewBag.Title = "EditCard";
    string formAction = ViewBag.FormAction;
}
@using Cardid.Models
@model Card


<h1 class="view-title">Edit card</h1>

<div class="flex flex-baseline">

    <div class="editcard">
        <div class="card-content">
            <div>

                @using (Html.BeginForm(formAction, "Card", FormMethod.Post))
                {
                    <div>
                        @Html.HiddenFor(m => m.CardID)
                        <h4 class="bold">Front of card:</h4>
                        @Html.TextAreaFor(m => m.Front, new { @class = "submit-change" })
                        <h4 class="bold">Back of card:</h4>
                        @Html.TextAreaFor(m => m.Back, new { @class = "submit-change" })
                    </div>
                }
            </div>
        </div>

        @using (Html.BeginForm("DeleteCard", "Card", new { cardID = Model.CardID }, FormMethod.Post))
        {
            <button class="btn delete-btn">Delete This Card</button>
        }
    </div>

    <div class="editcard">
        @if (Session["currentdeck"] != null)
        {
            Deck currentDeck = Session["currentDeck"] as Deck;
            string deckName = currentDeck.Name;

            @Html.ActionLink("Return to deck: " + deckName, "EditDeck", "Deck", new { deckID = currentDeck.DeckID }, new { @class = "btn main-btn" })
            <div class="">All changes saved automatically</div>
        }
        else
        {

            @Html.ActionLink("Return to cards", "Index", "Card", null, new { @class = "btn main-btn" })
            <div class="">All changes saved automatically</div>
        }

    </div>

</div>




<script type="text/javascript" src="../../Content/editCard.js"></script>

